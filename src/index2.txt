// import * as ace from "./ace-builds/src/ace.js"
// import "./ace-builds/src-noconflict/mode-javascript.js";
// import "./ace-builds/src-noconflict/theme-monokai.js"; 
let editor;
let goaleditor;
let score = 0;
let scoreBox;
// TODO: diff_match_patch to highlight line diffs

document.addEventListener('DOMContentLoaded', async () => {

  editor = ace.edit("editor");
  editor.setTheme("ace/theme/monokai");
  editor.session.setMode("ace/mode/javascript");
  editor.setKeyboardHandler("ace/keyboard/vim");
  editor.setOptions({
    fontSize: "12pt"
  })

  goaleditor = ace.edit("goaleditor")
  goaleditor.setTheme("ace/theme/monokai")
  goaleditor.session.setMode("ace/mode/javascript")
  goaleditor.setReadOnly(true)
  goaleditor.setOptions({
    fontSize: "12pt"
  })
  
  scoreBox = document.getElementById('scoreBox')

  setInterval(getLines, 5000)

  document.getElementById('editor').addEventListener('keyup', compareTextLines);
  htmx.on("htmx:afterRequest", function(evt) {
    if (evt.detail.elt.id === 'compareButton') {
      evt.detail.elt.setAttribute('disabled', true);
    }
  })
});

document.body.addEventListener("getChallenges", function(e){
    console.log("getChallenges trigged")
    let editRev = editor.session.$undoManager.startNewGroup()
    let goalRev = goaleditor.session.$undoManager.startNewGroup()

    editor.session.getDocument().insertFullLines(editor.session.getLength() + 1, e.detail.startString)
    goaleditor.session.getDocument().insertFullLines(goaleditor.session.getLength() + 1, e.detail.endString)

    editor.session.$undoManager.markIgnored(editRev)
    goaleditor.session.$undoManager.markIgnored(goalRev)
})

function normalizeText(text) {
  return text.replace(/\s+/g, ' ').trim();
}

function compareTextareas() {
  var textarea1 = normalizeText(editor.getValue());
  var textarea2 = normalizeText(goaleditor.getValue());
  var compareButton = document.getElementById('compareButton')
  if (textarea1 === textarea2) {
    compareButton.removeAttribute("disabled")
    console.log("text is the same now")
  } else {
    compareButton.setAttribute(`disabled`, "true")
    console.log("text is not the same")
  } 
}
function compareTextLines() {
  console.log('compareTextLines ran.')
  let min = Math.min(editor.session.getDocument().getLength(), goaleditor.session.getDocument().getLength())
  let editorLines = editor.session.getDocument().getLines(0, min)
  let goalLines = goaleditor.session.getDocument().getLines(0, min)
  let matchingList = [];
  for (let i=min-1; i>=0; i--) {
    if (normalizeText(editorLines[i]) == normalizeText(goalLines[i])){
      matchingList.push(i)
    }
  }
  console.log("Matching lines:", ...matchingList)
  matchingList.forEach( (e)=> {
    editor.session.getDocument().removeFullLines(e, e)
    goaleditor.session.getDocument().removeFullLines(e, e)
    score++
    scoreBox.innerHTML = score
  })
}

function getLines() {
    htmx.ajax("GET", "/get-lines", {
      swap: "none"
    })
}
